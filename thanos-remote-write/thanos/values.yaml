objstoreConfig: |-
    type: S3
    config:
      bucket: prometheus-metrics
      endpoint: {{ include "thanos.minio.fullname" . }}.monitoring.svc.cluster.local:9000
      insecure: true
      access_key: admin
      secret_key: devopskey
#query:
#  stores: []
compactor:
  ## @param compactor.enabled Enable/disable Thanos Compactor component
  ##
  enabled: true
  retentionResolutionRaw: 30d
  retentionResolution5m: 30d
  retentionResolution1h: 10y
storegateway:
  ## @param storegateway.enabled Enable/disable Thanos Store Gateway component
  ##
  enabled: true
receive:
  ## @param receive.enabled Enable/disable Thanos Receive component
  ##
  enabled: true
  ## @param receive.mode Mode to run receiver in. Valid options are "standalone" or "dual-mode"
  ## ref: https://github.com/thanos-io/thanos/blob/release-0.22/docs/proposals-accepted/202012-receive-split.md
  ## Enables running the Thanos Receiver in dual mode. Setting this to "dual-mode" will create a deployment for
  ## the stateless thanos distributor.
  mode: standalone
  #config:
  #  - endpoints:
  #    - "127.0.0.1:19291"
  tsdbRetention: 15d
ruler:
  enabled: true
  alertmanagers:
    - http://prometheus-operator-alertmanager.monitoring.svc.cluster.local:9093
  config: |-
    groups:
      - name: "metamonitoring"
        rules:
          - alert: "PrometheusDown"
            expr: absent(up{prometheus="monitoring/prometheus-operator"})
minio:
  ## @param minio.enabled Enable/disable MinIO&reg; chart installation
  ## to be used as an objstore for Thanos
  ##
  enabled: false
  ## MinIO&reg; authentication parameters
  ##
  auth:
    ## @param minio.auth.rootUser MinIO&reg; root username
    ##
    rootUser: admin
    ## @param minio.auth.rootPassword Password for MinIO&reg; root user
    ##
    rootPassword: "devopskey"
    defaultBuckets: "prometheus-metrics"